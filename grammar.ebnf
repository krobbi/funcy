(* Funcy Reference Grammar *)

root = { stmt_func }, EOF ;

stmt = stmt_func | stmt_block | stmt_nop | stmt_return | stmt_print | stmt_expr ;

stmt_func   = "func", IDENTIFIER, "(", [ IDENTIFIER, { ",", IDENTIFIER } ], ")", stmt_block ;
stmt_block  = "{", { stmt }, "}" ;
stmt_if     = "if", expr_paren, stmt ;
stmt_nop    = ";" ;
stmt_return = "return", [ expr ], ";" ;
stmt_print  = "print", expr_paren, ";" ;
stmt_expr   = expr, ";" ;

expr_paren = "(", expr, ")" ;
expr       = expr_sum ;

(* Expressions by increasing precedence level. *)
expr_sum     = expr_term, { ( "+" | "-" ), expr_term } ;
expr_term    = expr_sign, { ( "%" | "*" | "/" ), expr_sign } ;
expr_sign    = { "+" }, ( "-", expr_sign | expr_call ) ;
expr_call    = expr_primary, { "(", [ expr, { ",", expr } ], ")" } ;
expr_primary = expr_paren | LITERAL_INT | IDENTIFIER ;
